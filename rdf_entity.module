<?php

/**
 * @file
 * Main functions and hook implementations of the RDF Entity module.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\field_ui\Form\FieldStorageConfigEditForm;
use \Drupal\field\Entity\FieldStorageConfig;
/**
 * Implements hook_form_alter().
 */
function rdf_entity_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id != 'field_storage_config_edit_form') {
    return;
  }
  // Only add mapping form element to rdf entities fields.
  if ($form_state->get('entity_type_id') != 'rdf_entity') {
    return;
  }
  $form_obj = $form_state->getFormObject();
  /** @var FieldStorageConfig $entity */
  $entity = $form_obj->getEntity();
  $schema = $entity->getSchema();
  $form['rdf_mapping'] = array(
    '#type' => 'details',
    '#title' => t('Rdf field mapping'),
    '#description' => t('This field uses a Sparql backend. Please map the fields to their corresponding rdf properties.'),
    '#weight' => 99,
  );
  foreach ($schema['columns'] as $column => $column_desc) {
    $description = $column_desc['description'] . "<br>";
    foreach (array('type', 'length', 'size', 'serialize') as $key) {
      if (!empty($column_desc[$key])) {
        $description .= '<strong>' . $key . "</strong>: " . $column_desc[$key] . ' ';
      }
    }

    $form['rdf_mapping'][$column] = array(
      '#type' => 'textfield',
      '#title' => $column,
      '#description' => $description,
      '#weight' => 150,
      '#default_value' => $entity->getThirdPartySetting('rdf_entity', 'mapping_' . $column, FALSE),
    );
  }

  $form['#entity_builders'][] = 'rdf_entity_form_alter_builder';
}

/**
 * Entity builder callback: Save rdf field mapping.
 */
function rdf_entity_form_alter_builder($entity_type, FieldStorageConfig $entity, FieldStorageConfigEditForm &$form, FormStateInterface $form_state) {
  $schema = $entity->getSchema();
  foreach ($schema['columns'] as $column => $column_desc) {
    $value = $form_state->getValue($column);
    $entity->setThirdPartySetting('rdf_entity', 'mapping_' . $column, $value);
  }
}

/**
 * Implements hook_rdf_entity_view().
 *
 * @todo Remove this.
 * Prints the bundle when viewing the rdf in full.
 */
function rdf_entity_rdf_entity_view($build, $entity, $display, $view_mode) {
  if ($entity instanceof \Drupal\rdf_entity\Entity\Rdf && $view_mode == 'full') {
    drupal_set_message(
      t('Current page - Bundle: %bundle', array(
        '%bundle' => $entity->bundle(),
      )),
    'info'
    );
  }
}
