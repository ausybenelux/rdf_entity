<?php

/**
 * @file
 * Includes installation functions for the rdf_entity module.
 */

use Drupal\rdf_entity\Entity\RdfEntityMapping;
use Drupal\rdf_entity\Entity\RdfEntitySparqlStorage;

/**
 * Implements hook_requirements().
 */
function rdf_entity_requirements($phase) {
  $requirements = [];
  if ($phase !== 'runtime') {
    return $requirements;
  }

  $requirements += rdf_entity_virtuoso_version_requirements();
  // If the endpoint is not available, return early.
  if (
    isset($requirements['rdf_entity_endpoint']['severity']) &&
    $requirements['rdf_entity_endpoint']['severity'] === REQUIREMENT_ERROR
  ) {
    return $requirements;
  }

  $requirements += rdf_entity_virtuoso_permission_requirements();
  return $requirements;
}

/**
 * Move RDF entity mapping data from bundle entities into dedicated entities.
 */
function rdf_entity_update_8100() {
  $entity_type_manager = \Drupal::entityTypeManager();

  // Iterate over all entities that are bundles of content entities with
  // RdfEntitySparqlStorage and move their 3rd party settings belonging to
  // rdf_entity module into their dedicated rdf_entity_mapping config entities.
  foreach ($entity_type_manager->getDefinitions() as $entity_type_id => $entity_type) {
    if ($storage = $entity_type_manager->getStorage($entity_type_id)) {
      if ($storage instanceof RdfEntitySparqlStorage) {
        if ($bundle_entity_type_id = $entity_type->getBundleEntityType()) {
          if ($bundle_storage = $entity_type_manager->getStorage($bundle_entity_type_id)) {
            /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $bundle_entity */
            foreach ($bundle_storage->loadMultiple() as $bundle => $bundle_entity) {
              $third_party_settings = $bundle_entity->getThirdPartySettings('rdf_entity');
              $values = [
                'entity_type_id' => $entity_type_id,
                'bundle' => $bundle,
              ] + $third_party_settings;
              // Rename key 'mapping' to 'base_fields_mapping'.
              $values['base_fields_mapping'] = $values['mapping'] ?? [];
              unset($values['mapping']);

              // Create the new 'rdf_entity_mapping' entity.
              RdfEntityMapping::create($values)->save();

              // Cleanup 3rd party settings from the bundle entity.
              foreach ($third_party_settings as $key => $value) {
                $bundle_entity->unsetThirdPartySetting('rdf_entity', $key);
              }
              $bundle_entity->save();
            }
          }
        }
      }
    }
  }
}
